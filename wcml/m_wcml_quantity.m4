dnl
dnl First part is boilerplate to give us a foreach function
dnl
divert(-1)
# foreach(x, (item_1, item_2, ..., item_n), stmt)
define(`m4_foreach', `pushdef(`$1', `')_foreach(`$1', `$2', `$3')popdef(`$1')')
define(`_arg1', `$1')
define(`_foreach',
        `ifelse(`$2', `()', ,
                `define(`$1', _arg1$2)$3`'_foreach(`$1', (shift$2), `$3')')')
# traceon(`define', `foreach', `_foreach', `ifelse')
divert 
dnl
dnl Define a few basic bits
dnl
dnl
define(`TOHWM4_declarationtype', `dnl
ifelse(`$1', `RealDp', `real(dp)', 
       `$1', `RealSp', `real(sp)', 
       `$1', `Int', `integer', 
       `$1', `Lg', `logical', 
       `$1', `Ch', `character(len=*)') dnl
')dnl
dnl
dnl
define(`TOHWM4_interfacename',module procedure `$1'`$2'`$3')dnl
dnl
define(`TOHWM4_interfacelist', `dnl
     TOHWM4_interfacename(`$1',`$2',`Sca')
     TOHWM4_interfacename(`$1',`$2',`ArrSi')
     TOHWM4_interfacename(`$1',`$2',`ArrSh')
     TOHWM4_interfacename(`$1',`$2',`MatSi')
     TOHWM4_interfacename(`$1',`$2',`MatSh')
')dnl
dnl
dnl
dnl given a list (a, b, c) strip off the brackets:
define(`TOHWM4_dummyarglist',`dnl
substr($1,1,decr(decr(len($1))))`'dnl
')dnl
dnl
dnl given a variable name a, declare it as follows:
define(`TOHWM4_dummyargdecl',`dnl
    character(len=*), intent(in), optional :: $1
')dnl
dnl
dnl use an optional character variable:
define(`TOHWM4_dummyarguse',`dnl
    if (present($1)) call xml_addAttribute(xf, "$1", $1)
')dnl
dnl
dnl
dnl This is what a subroutine looks like.
dnl First arg is name of quantity (property/parameter)
dnl Second arg is list of optional args
dnl Third arg is type of property(character/logical etc.)
dnl Fourth arg is whether scalar; assumed-size array, assumed-shape array, assumed size, matrix, or assumed-shape matrix.
define(`TOHWM4_QuantitySub',`dnl
  subroutine `$1'`$3'`$4' &
    (xf, value, dnl
ifelse(`$4', `ArrSi', `nitems, ', `$4', `MatSi', `nrows, ncols, ') dnl
 TOHWM4_dummyarglist(`$2') dnl
ifelse(`$3',`Lg',`',`, units') dnl
ifelse(substr($3,0,4),`Real',`,fmt)',`)')

    type(xmlf_t), intent(inout)              :: xf
    TOHWM4_declarationtype(`$3'), intent(in) dnl
ifelse(substr($4,0,3), `Arr', `, dimension(:)', substr($4,0,3), `Mat', `, dimension(:,:)') dnl
 :: value
ifelse(`$4', `ArrSi', `dnl
    integer, intent(in) :: nitems
', `$4', `MatSi', `dnl
    integer, intent(in) :: nrows
    integer, intent(in) :: ncols
')dnl
dnl
m4_foreach(`x', `$2', `TOHWM4_dummyargdecl(x)')
dnl
ifelse(`$3',`Lg',`',`dnl
    character(len=*), intent(in), optional :: units
')dnl
ifelse(substr($3,0,4),`Real',`dnl 
    character(len=*), intent(in), optional :: fmt
')dnl

    call xml_NewElement(xf, "$1")
dnl
m4_foreach(`x', `$2', `TOHWM4_dummyarguse(x)')
dnl
    call stmAddValue(xf=xf dnl
ifelse($4, `ArrSi', `, value=value(:nitems)', $4, `MatSi', `, value=value(:nrows, :ncols)', `, value=value') dnl
ifelse(`$3',`Lg',`',`, units=units') dnl
ifelse(substr($3,0,4),`Real',`,fmt=fmt',`') dnl
)
dnl
    call xml_EndElement(xf, "$1")

  end subroutine `$1'`$3'`$4'
')dnl
dnl
dnl
dnl
define(`TOHWM4_Doc',`dnl
! This file is AUTOGENERATED!!!!
! Do not edit this file; edit m_wcml_quantity.m4 and regenerate.
!
!
module m_wcml_$1

  use m_common_realtypes, only: sp, dp
  use FoX_wxml, only: xmlf_t
  use FoX_wxml, only: xml_NewElement, xml_AddAttribute
  use FoX_wxml, only: xml_EndElement
  use m_wcml_stml, only: stmAddValue

  implicit none
  private

  interface cmlAdd$1
m4_foreach(`x', `(RealDp, RealSp, Int, Lg, Ch)', `TOHWM4_interfacelist($1, x)')
  end interface cmlAdd$1

  public :: cmlAdd$1

contains

dnl Make the Scalar subroutines:
m4_foreach(`x', `(RealDp, RealSp, Int, Lg, Ch)', `TOHWM4_QuantitySub($1, `$2', x, `Sca')
')
m4_foreach(`x', `(RealDp, RealSp, Int, Lg, Ch)', `TOHWM4_QuantitySub($1, `$2', x, `ArrSi')
')
m4_foreach(`x', `(RealDp, RealSp, Int, Lg, Ch)', `TOHWM4_QuantitySub($1, `$2', x, `ArrSh')
')
m4_foreach(`x', `(RealDp, RealSp, Int, Lg, Ch)', `TOHWM4_QuantitySub($1, `$2', x, `MatSi')
')
m4_foreach(`x', `(RealDp, RealSp, Int, Lg, Ch)', `TOHWM4_QuantitySub($1, `$2', x, `MatSh')
')
dnl
end module m_wcml_$1
')dnl
TOHWM4_Doc(`property', `(dictRef, convention, title, id, ref, role)')

TOHWM4_Doc(`parameter', `(ref, title, id, convention, dictRef, constraint, name, role)')
dnl

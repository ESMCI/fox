divert(-1)
# foreach(x, (item_1, item_2, ..., item_n), stmt)
define(`m4_foreach', `pushdef(`$1', `')_foreach(`$1', `$2', `$3')popdef(`$1')')
define(`_arg1', `$1')
define(`_foreach',
        `ifelse(`$2', `()', ,
                `define(`$1', _arg1$2)$3`'_foreach(`$1', (shift$2), `$3')')')
# traceon(`define', `foreach', `_foreach', `ifelse')
divert 
dnl
dnl given a list (a, b, c) strip off the brackets:
define(`TOHWM4_dummyarglist',`dnl
substr($1,1,decr(decr(len($1))))`'dnl
')dnl
dnl
dnl given a variable name a, declare it as follows:
define(`TOHWM4_dummyargdecl',`dnl
    character(len=*), intent(in), optional :: $1
')dnl
dnl
dnl use an optional character variable:
define(`TOHWM4_dummyarguse',`dnl
    if (present($1)) call xml_addAttribute(xf, "$1", $1)
')dnl
dnl
define(`TOHWM4_list_subs', `dnl

  subroutine cmlStart$1(xf, TOHWM4_dummyarglist($2))

    type(xmlf_t), intent(inout) :: xf
dnl
m4_foreach(`x', `$2', `TOHWM4_dummyargdecl(x)')
dnl

    call xml_NewElement(xf, "$1")

dnl
m4_foreach(`x', `$2', TOHWM4_dummyarguse(x))
dnl
 
  end subroutine cmlStart$1

  subroutine cmlEnd$1(xf)
    type(xmlf_t), intent(inout) :: xf
    call xmLEndElement(xf, "$1")
  end subroutine cmlEnd$1

')dnl
dnl
dnl
! This file is AUTOGENERATED!!!!
! Do not edit this file; edit m_wcml_metadata.m4 and regenerate.
!

module m_wcml_lists

  use FoX_common, only: str
  use FoX_wxml, only: xmlf_t
  use FoX_wxml, only: xml_NewElement, xml_EndElement
  use FoX_wxml, only: xml_AddAttribute

  implicit none
  private

  public :: cmlStartMetadataList
  public :: cmlEndMetadataList

  public :: cmlStartPropertyList
  public :: cmlEndPropertyList

  public :: cmlStartParameterList
  public :: cmlEndParameterList

  public :: cmlStartModule
  public :: cmlEndModule

  public :: cmlStartStep
  public :: cmlEndStep

contains

TOHWM4_list_subs(`metadataList', (`dictRef', `convention', `title', `id', `name', `role'))

TOHWM4_list_subs(`propertyList', (dictRef, convention, title, id, ref, role))

TOHWM4_list_subs(`parameterList', (dictRef, convention, title, id, ref, role))

TOHWM4_list_subs(`module', (serial, title, id, convention, dictRef, role))

  subroutine cmlStartStep(xf, type, index, id, title, convention)
    type(xmlf_t), intent(inout) :: xf
    character(len=*), intent(in), optional :: type
    character(len=*), intent(in), optional :: id
    integer, intent(in), optional :: index
    character(len=*), intent(in), optional :: title
    character(len=*), intent(in), optional :: convention

    if (present(index)) then
      call cmlStartModule(xf=xf, id=id, title=title, convention=convention, &
        dictRef=type, role='step', serial=str(index))
    else
      call cmlStartModule(xf=xf, id=id, title=title, convention=convention, &
        dictRef=type, role='step')
    endif
    
  end subroutine cmlStartStep


  subroutine cmlEndStep(xf)
    type(xmlf_t), intent(inout) :: xf

    call xml_EndElement(xf, 'module')
    
  end subroutine cmlEndStep


end module m_wcml_lists
